# VoidRunner Development Overrides
# Extends base docker-compose.yml with development-specific settings

services:
  postgres:
    container_name: voidrunner-postgres-dev
    environment:
      POSTGRES_DB: voidrunner_dev
      POSTGRES_USER: voidrunner
      POSTGRES_PASSWORD: voidrunner_dev_password
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF8 --lc-collate=C --lc-ctype=C}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voidrunner -d voidrunner_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voidrunner-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  redis:
    container_name: voidrunner-redis-dev
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    networks:
      - voidrunner-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.05'

  api:
    container_name: voidrunner-api-dev
    build:
      target: development
    environment:
      # Development Environment
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${SERVER_PORT:-8080}
      SERVER_ENV: development
      
      # Embedded Workers Configuration
      EMBEDDED_WORKERS: ${EMBEDDED_WORKERS:-true}
      
      # Database (Development)
      DB_HOST: postgres
      DB_USER: voidrunner
      DB_PASSWORD: voidrunner_dev_password
      DB_NAME: voidrunner_dev
      DB_SSL_MODE: disable
      
      # Redis Configuration (Development)
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      REDIS_POOL_SIZE: ${REDIS_POOL_SIZE:-10}
      REDIS_MIN_IDLE_CONNECTIONS: ${REDIS_MIN_IDLE_CONNECTIONS:-5}
      REDIS_MAX_RETRIES: ${REDIS_MAX_RETRIES:-3}
      REDIS_DIAL_TIMEOUT: ${REDIS_DIAL_TIMEOUT:-5s}
      REDIS_READ_TIMEOUT: ${REDIS_READ_TIMEOUT:-3s}
      REDIS_WRITE_TIMEOUT: ${REDIS_WRITE_TIMEOUT:-3s}
      REDIS_IDLE_TIMEOUT: ${REDIS_IDLE_TIMEOUT:-5m}
      
      # Queue Configuration (Development)
      QUEUE_TASK_QUEUE_NAME: "voidrunner:tasks:dev"
      QUEUE_DEAD_LETTER_QUEUE_NAME: "voidrunner:tasks:dead:dev"
      QUEUE_RETRY_QUEUE_NAME: "voidrunner:tasks:retry:dev"
      QUEUE_DEFAULT_PRIORITY: ${QUEUE_DEFAULT_PRIORITY:-5}
      QUEUE_MAX_RETRIES: ${QUEUE_MAX_RETRIES:-3}
      QUEUE_RETRY_DELAY: ${QUEUE_RETRY_DELAY:-30s}
      QUEUE_RETRY_BACKOFF_FACTOR: ${QUEUE_RETRY_BACKOFF_FACTOR:-2.0}
      QUEUE_MAX_RETRY_DELAY: ${QUEUE_MAX_RETRY_DELAY:-15m}
      QUEUE_VISIBILITY_TIMEOUT: ${QUEUE_VISIBILITY_TIMEOUT:-30m}
      QUEUE_MESSAGE_TTL: ${QUEUE_MESSAGE_TTL:-24h}
      QUEUE_BATCH_SIZE: ${QUEUE_BATCH_SIZE:-10}
      
      # Development Worker Settings
      WORKER_POOL_SIZE: ${WORKER_POOL_SIZE:-2}
      WORKER_MAX_CONCURRENT_TASKS: ${WORKER_MAX_CONCURRENT_TASKS:-10}
      WORKER_MAX_USER_CONCURRENT_TASKS: ${WORKER_MAX_USER_CONCURRENT_TASKS:-3}
      WORKER_TASK_TIMEOUT: ${WORKER_TASK_TIMEOUT:-5m}
      WORKER_HEARTBEAT_INTERVAL: ${WORKER_HEARTBEAT_INTERVAL:-30s}
      WORKER_SHUTDOWN_TIMEOUT: ${WORKER_SHUTDOWN_TIMEOUT:-30s}
      WORKER_CLEANUP_INTERVAL: ${WORKER_CLEANUP_INTERVAL:-5m}
      WORKER_STALE_TASK_THRESHOLD: ${WORKER_STALE_TASK_THRESHOLD:-2h}
      WORKER_ID_PREFIX: ${WORKER_ID_PREFIX:-voidrunner-worker}
      
      # Development Executor Settings (Relaxed Security)
      DOCKER_ENDPOINT: "unix:///var/run/docker.sock"
      EXECUTOR_DEFAULT_MEMORY_LIMIT_MB: ${EXECUTOR_DEFAULT_MEMORY_LIMIT_MB:-256}
      EXECUTOR_DEFAULT_CPU_QUOTA: ${EXECUTOR_DEFAULT_CPU_QUOTA:-50000}
      EXECUTOR_DEFAULT_PIDS_LIMIT: ${EXECUTOR_DEFAULT_PIDS_LIMIT:-128}
      EXECUTOR_DEFAULT_TIMEOUT_SECONDS: ${EXECUTOR_DEFAULT_TIMEOUT_SECONDS:-300}
      EXECUTOR_PYTHON_IMAGE: ${EXECUTOR_PYTHON_IMAGE:-python:3.11-alpine}
      EXECUTOR_BASH_IMAGE: ${EXECUTOR_BASH_IMAGE:-alpine:latest}
      EXECUTOR_JAVASCRIPT_IMAGE: ${EXECUTOR_JAVASCRIPT_IMAGE:-node:18-alpine}
      EXECUTOR_GO_IMAGE: ${EXECUTOR_GO_IMAGE:-golang:1.21-alpine}
      EXECUTOR_ENABLE_SECCOMP: ${EXECUTOR_ENABLE_SECCOMP:-false}  # Disabled for easier development
      EXECUTOR_SECCOMP_PROFILE_PATH: ${EXECUTOR_SECCOMP_PROFILE_PATH:-/opt/voidrunner/seccomp-profile.json}
      EXECUTOR_ENABLE_APPARMOR: ${EXECUTOR_ENABLE_APPARMOR:-false}
      EXECUTOR_APPARMOR_PROFILE: ${EXECUTOR_APPARMOR_PROFILE:-voidrunner-executor}
      EXECUTOR_EXECUTION_USER: ${EXECUTOR_EXECUTION_USER:-1000:1000}
      
      # Development Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_FORMAT: ${LOG_FORMAT:-console}
      
      # Development JWT (Insecure)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-development-secret-key-change-in-production}
      JWT_ACCESS_TOKEN_DURATION: ${JWT_ACCESS_TOKEN_DURATION:-15m}
      JWT_REFRESH_TOKEN_DURATION: ${JWT_REFRESH_TOKEN_DURATION:-168h}
      JWT_ISSUER: ${JWT_ISSUER:-voidrunner}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-voidrunner-api}
      
      # Development CORS (Permissive)
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-Content-Type,Authorization,X-Request-ID}
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
      # Add source code mounting for live development (if using air)
      - .:/app/src:ro
    
    networks:
      - voidrunner-backend
    
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

networks:
  voidrunner-backend:
    driver: bridge
