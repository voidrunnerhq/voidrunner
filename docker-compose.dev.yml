# Docker Compose for VoidRunner Development Environment
# This setup uses embedded workers in the API server for simplicity
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voidrunner-postgres-dev
    environment:
      POSTGRES_DB: voidrunner_dev
      POSTGRES_USER: voidrunner
      POSTGRES_PASSWORD: voidrunner_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voidrunner -d voidrunner_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - voidrunner-dev

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    container_name: voidrunner-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - voidrunner-dev

  # VoidRunner API Server with Embedded Workers
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: voidrunner-api-dev
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8080"
      SERVER_ENV: "development"
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: voidrunner
      DB_PASSWORD: voidrunner_dev_password
      DB_NAME: voidrunner_dev
      DB_SSL_MODE: disable
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      REDIS_DATABASE: "0"
      
      # Queue Configuration
      QUEUE_TASK_QUEUE_NAME: "voidrunner:tasks:dev"
      QUEUE_RETRY_QUEUE_NAME: "voidrunner:tasks:retry:dev"
      QUEUE_DEAD_LETTER_QUEUE_NAME: "voidrunner:tasks:dead:dev"
      
      # Embedded Workers Configuration
      EMBEDDED_WORKERS: "true"
      WORKER_POOL_SIZE: "3"
      WORKER_MAX_CONCURRENT_TASKS: "10"
      WORKER_MAX_USER_CONCURRENT_TASKS: "3"
      WORKER_TASK_TIMEOUT: "5m"
      WORKER_HEARTBEAT_INTERVAL: "30s"
      
      # Executor Configuration (Development)
      DOCKER_ENDPOINT: "unix:///var/run/docker.sock"
      EXECUTOR_DEFAULT_MEMORY_LIMIT_MB: "256"
      EXECUTOR_DEFAULT_CPU_QUOTA: "50000"
      EXECUTOR_DEFAULT_TIMEOUT_SECONDS: "300"
      EXECUTOR_ENABLE_SECCOMP: "false"  # Disabled for easier development
      
      # Logging Configuration
      LOG_LEVEL: "debug"
      LOG_FORMAT: "console"
      
      # JWT Configuration
      JWT_SECRET_KEY: "development-secret-key-change-in-production"
      JWT_ACCESS_TOKEN_DURATION: "15m"
      JWT_REFRESH_TOKEN_DURATION: "7d"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker executor
      - ./logs:/app/logs                               # Log persistence
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - voidrunner-dev
    
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  voidrunner-dev:
    driver: bridge