# VoidRunner Test Environment Configuration
# Copy this file to .env.test for running integration tests
# These settings use different ports to avoid conflicts with dev/production

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

SERVER_HOST=localhost
SERVER_PORT=8080
SERVER_ENV=test
API_PORT=8080
BUILD_TARGET=production

# =============================================================================
# DATABASE CONFIGURATION (TEST PORTS)
# =============================================================================

# Test database with different port to avoid conflicts
DB_HOST=localhost
DB_PORT=5433  # Different from default 5432 to avoid conflicts
DB_USER=testuser
DB_PASSWORD=testpassword
DB_NAME=voidrunner_test
DB_SSL_MODE=disable

# PostgreSQL container configuration for test environment
POSTGRES_DB=voidrunner_test
POSTGRES_USER=testuser
POSTGRES_PASSWORD=testpassword
POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C

# =============================================================================
# REDIS CONFIGURATION (TEST PORTS)
# =============================================================================

# Test Redis with different port to avoid conflicts
REDIS_HOST=localhost
REDIS_PORT=6380  # Different from default 6379 to avoid conflicts
REDIS_PASSWORD=
REDIS_DATABASE=0
REDIS_MAX_MEMORY=256mb  # Smaller limit for test environment

# Redis connection pool settings (smaller for tests)
REDIS_POOL_SIZE=5
REDIS_MIN_IDLE_CONNECTIONS=2
REDIS_MAX_RETRIES=3
REDIS_DIAL_TIMEOUT=5s
REDIS_READ_TIMEOUT=3s
REDIS_WRITE_TIMEOUT=3s
REDIS_IDLE_TIMEOUT=5m

# =============================================================================
# QUEUE CONFIGURATION (TEST)
# =============================================================================

# Test-specific queue names
QUEUE_TASK_QUEUE_NAME=voidrunner:tasks:test
QUEUE_DEAD_LETTER_QUEUE_NAME=voidrunner:tasks:dead:test
QUEUE_RETRY_QUEUE_NAME=voidrunner:tasks:retry:test

# Test queue settings (faster timeouts for tests)
QUEUE_DEFAULT_PRIORITY=5
QUEUE_MAX_RETRIES=2  # Fewer retries for faster test execution
QUEUE_RETRY_DELAY=5s  # Shorter delay for tests
QUEUE_RETRY_BACKOFF_FACTOR=2.0
QUEUE_MAX_RETRY_DELAY=30s  # Shorter max delay
QUEUE_VISIBILITY_TIMEOUT=5m  # Shorter timeout for tests
QUEUE_MESSAGE_TTL=1h  # Shorter TTL for tests
QUEUE_BATCH_SIZE=5  # Smaller batch size

# =============================================================================
# WORKER CONFIGURATION (TEST)
# =============================================================================

# Test worker settings (smaller pools for CI/test environments)
EMBEDDED_WORKERS=true
WORKER_POOL_SIZE=1  # Single worker for predictable test execution
WORKER_MAX_CONCURRENT_TASKS=5
WORKER_MAX_USER_CONCURRENT_TASKS=2
WORKER_TASK_TIMEOUT=30s  # Shorter timeout for tests
WORKER_HEARTBEAT_INTERVAL=10s
WORKER_SHUTDOWN_TIMEOUT=10s
WORKER_CLEANUP_INTERVAL=1m
WORKER_STALE_TASK_THRESHOLD=5m
WORKER_ID_PREFIX=voidrunner-test-worker

# =============================================================================
# EXECUTOR CONFIGURATION (TEST)
# =============================================================================

DOCKER_ENDPOINT=unix:///var/run/docker.sock

# Smaller resource limits for test environment
EXECUTOR_DEFAULT_MEMORY_LIMIT_MB=128
EXECUTOR_DEFAULT_CPU_QUOTA=25000  # Quarter of production
EXECUTOR_DEFAULT_PIDS_LIMIT=64
EXECUTOR_DEFAULT_TIMEOUT_SECONDS=60  # 1 minute timeout for tests

# Container images (same as production)
EXECUTOR_PYTHON_IMAGE=python:3.11-alpine
EXECUTOR_BASH_IMAGE=alpine:latest
EXECUTOR_JAVASCRIPT_IMAGE=node:18-alpine
EXECUTOR_GO_IMAGE=golang:1.21-alpine

# Security settings (can be relaxed for testing)
EXECUTOR_ENABLE_SECCOMP=false  # Disabled for easier testing
EXECUTOR_SECCOMP_PROFILE_PATH=/opt/voidrunner/seccomp-profile.json
EXECUTOR_ENABLE_APPARMOR=false
EXECUTOR_APPARMOR_PROFILE=voidrunner-executor
EXECUTOR_EXECUTION_USER=1000:1000

# =============================================================================
# LOGGING CONFIGURATION (TEST)
# =============================================================================

LOG_LEVEL=info  # Less verbose than debug for cleaner test output
LOG_FORMAT=console  # Easier to read in test environments

# =============================================================================
# JWT CONFIGURATION (TEST)
# =============================================================================

# Test JWT settings - insecure but predictable for testing
JWT_SECRET_KEY=test-secret-key-for-integration-tests-only
JWT_ACCESS_TOKEN_DURATION=5m  # Shorter for testing token expiry
JWT_REFRESH_TOKEN_DURATION=30m  # Shorter for testing refresh
JWT_ISSUER=voidrunner-test
JWT_AUDIENCE=voidrunner-api-test

# =============================================================================
# CORS CONFIGURATION (TEST)
# =============================================================================

# Permissive CORS for testing
CORS_ALLOWED_ORIGINS=*
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Request-ID

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# To use this configuration:
# 1. Copy this file to .env.test
# 2. Start test services: docker-compose -f docker-compose.test.yml up -d
# 3. Run tests against the test database and Redis on ports 5433/6380
# 4. Clean up: docker-compose -f docker-compose.test.yml down

# Note: This configuration assumes you're running tests against containerized
# services. Adjust DB_HOST and REDIS_HOST if running tests against different
# database instances.